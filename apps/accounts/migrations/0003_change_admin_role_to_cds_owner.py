# Generated by Django 5.2.5 on 2025-08-16 17:20

from django.db import migrations, models


def change_admin_role_to_cds_owner(apps, schema_editor):
    """
    Change all users with role 'admin' to 'cds_owner'
    """
    User = apps.get_model('accounts', 'User')
    Group = apps.get_model('auth', 'Group')
    
    # Update users with admin role to cds_owner
    User.objects.filter(role='admin').update(role='cds_owner')
    
    # Update group name if it exists
    try:
        admin_group = Group.objects.get(name='Administrators')
        admin_group.name = 'CDS Owners'
        admin_group.save()
    except Group.DoesNotExist:
        pass


def reverse_change_admin_role_to_cds_owner(apps, schema_editor):
    """
    Reverse migration: change 'cds_owner' back to 'admin'
    """
    User = apps.get_model('accounts', 'User')
    Group = apps.get_model('auth', 'Group')
    
    # Revert users with cds_owner role back to admin
    User.objects.filter(role='cds_owner').update(role='admin')
    
    # Revert group name if it exists
    try:
        cds_owners_group = Group.objects.get(name='CDS Owners')
        cds_owners_group.name = 'Administrators'
        cds_owners_group.save()
    except Group.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_user_created_at_user_is_verified_user_role_and_more'),
    ]

    operations = [
        migrations.RunPython(
            change_admin_role_to_cds_owner,
            reverse_change_admin_role_to_cds_owner
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(
                choices=[
                    ('cds_owner', 'CDS Owner'),
                    ('staff', 'Staff'),
                    ('student', 'Student'),
                    ('entrepreneur', 'Entrepreneur')
                ],
                default='student',
                max_length=20
            ),
        ),
    ]
